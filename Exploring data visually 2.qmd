---
output: html_document
editor_options: 
  chunk_output_type: inline
---

# Exploring data visually

There is no better way of letting your data tell its story than through data visualization. This is also an important step in understanding the relationships between variables and developing research questions. We'd put this introduction to data visualization early on in the book because we believe that you'll find being able to "see" what you are able to do with just a few lines of code, you'll be motivated to continue with your journey to learn R. The point of this chapter is to get you excited about R. We'll do some more advanced data visualization later on in the book once you've developed some data wrangling skills.

## The grammar of graphics

The world of data visualization has been revolutionized with the introduction of ggplot2 - an R package that leans on a new of thinking about graphics. The starting point is to understand the "grammar of graphics" - these are the various parameters that need to be included in your code that will translate into meaningful visual characteristics in your plot. The power of this new way of thinking is that it allows you to build a plot, layer upon layer, combining geometry and aesthetics like an artist working on a canvas.

The best way to learn and understand the grammar of graphics is to look at an example. We're going to take a look at the "mpg" dataset that contains information about fuel efficiency for a number cars. We'll start by visualizing the relationship between two variables, namely "hwy" (highway miles per gallon) and "displ" (engine displacement - or size of the engine). To plot this relationship we need to define a few things:

1.  what data is being used,

2.  how the two variables are mapped against the x and y axis' of our plot and

3.  what kind of geometry should ggplot use to represent the data (a bar chart, scatter plot, line graph etc.).

Let's create the plot and then take a closer look at the code:

```{r, echo = F}
library(tidyverse)
```

```{r}
ggplot(data = mpg,
       mapping = aes(x = displ, y = hwy))+
  geom_point()
```

The three principle elements that have to be defined in any plot are: 1) that data are being used, 2) which variables in that data will determine the aesthetics of the plot and 3) what sort of geometry should be applied.

### **Identifying data:**

While ggplot has a "data" argument that allows you to define what data will be used to generate your plot, you can also feed the data directly into ggplot using pipe operators (but more about that later).

### Mapping aesthetics:

To tell your data story, you need to specify how variables within the data are mapped to aesthetic features of your plot. The most obvious examples are the x and y axis. You can also map variables to colors, shapes and sizes and other aesthetic qualities as we'll demonstrate in examples below.

### Defining geometry

By defining the geometry you tell R what kind of plot to create (a boxplot, a histogram, a line graph etc.). The beauty of ggplot is that you can create layers of geometry, each with its own aesthetic mapping. Its this feature that sets ggplot apart from other frameworks for data visualization. Once you get used to creating layers, you'll find a whole world of possibilities suddenly becomes available to you.

### Adding a layer 

So, without further ado, let's use one simple line of code to add a layer and superimpose a smoothed linear model with standard errors to demonstrate the relationship between these two variables.

```{r}
ggplot(data = mpg,
       mapping = aes(x = displ, 
                     y = hwy))+
  geom_point()+
  geom_smooth()
```

Each time we add a '+' at the end of a line, we're telling ggplot that we're going to add another layer or add information about how the plot should look.

### Neatening things up

Let's add some code to change the theme of the plot and add a title and axis' labels.

```{r}
ggplot(data = mpg,
       mapping = aes(x = displ, 
                     y = hwy))+
  geom_point()+
  geom_smooth()+
  labs(title = "Highway efficency by engine size",
       x = "Engine size in litres", 
       y = "Mile per gallon on the highway")+
  theme_bw()
```

The labs() function above is for labels and the theme_bw() is one of the many built in themes that you can easily add to a plot to clean it up.

Now let's add a little color to the plot and look at the same data but distinguish between cars of different "drives" (four wheel drive, front wheel drive, rear wheel drive etc.).

When we define mapping in the ggplot function itself, that mapping applies to all of the geometries that follow. If, however, you want to have a variable mapped against a particular aesthetic in just one geometry, then you can simple add that mapping as an argument in that geometry. Notice in the code below how I've mapped the "drives" to color only in the geom_point aesthetic. Also note that I've stopped using "data = \_\_" and "mapping = \_\_". It is taken for granted that the first argument is going to be data and that whenever you define aesthetics, it is for the purpose of mapping.

```{r}
ggplot(mpg, aes(x = displ, y = hwy))+
  geom_point(aes(color = drv))+
  geom_smooth()+
  labs(title = "Highway efficency by engine size",
       x = "Engine size in litres", 
       y = "Mile per gallon on the highway",
       color = "Drive")+
  theme_bw()
```

# Packages and the tidyverse

\[insert text\]

# Selecting columns, filtering rows and arranging your data

In neat and tidy data, each column is a variable and each row is an observation. This may sound obvious but its an extremely important principle that will serve us well through the rest of this book.

Once your data is imported, you'll often find that there are many more variables in your dataset than you want. You may want to "select" just the relevant variables. Similarly, there may be observations (or rows) that aren't relevant to your analysis. You may want to "filter" your observations to create a subset of data that meets certain criteria.

Consider the following dataset:

```{r echo = FALSE}
Name = c("Paul", "Sam", "Andrew", "Sarah")
Age = c(13, 14, 17, 65)
Eye_colour = c("Blue", "Brown", "Blue", "Green")
Occupation = c("Student", "Student", "Student", "Retired")
df = data.frame(Name, Age, Eye_colour,  Occupation)
df
```

If our analysis were to consider the eye colour of teenagers, the we would want to select the first three variables (Name, Age and Eye colour) and filter the data to include only those aged 11-19), to get something like this:

```{r echo = FALSE}
Name = c("Paul", "Sam", "Andrew")
Age = c(13, 14, 17)
Eye_colour = c("Blue", "Brown", "Blue")
df = data.frame(Name, Age, Eye_colour)
df
```

Well, fortunately, if you're using the tidyverse packages, then there are some very intuitive functions that become available. The first one that we're going to introduce you to is the "select" function. It does exactly what you think it does. You use it to select the variable you want to work with. Let's take a look.

Consider the "Starwars" dataset (another "built it" dataset that you have access to). Before we select the variables that we want to look at, let's look at the dataset itself using the view() function

```{r}
view(starwars)
```

We can extract the names of the 14 variables using the names() function.

```{r}
names(starwars)
```

Let's imagine that we only want to work with the starwars character's names, height and mass. We start with the select() function and then type in the first argument which is the dataset that we're working with, followed by the names of the variables that you want to include.

```{r}
select(starwars,name, height, mass)
```

Similarly, we could filter the data to include only those characters that are taller than 100 cm. We start with the filter() function and then type in the first argument which is the dataset that you're working with, followed by a phrase that describes your selection, like this:

```{r}
filter(starwars, height > 100)
```

You might also want your data to be ordered from lightest to heaviest. Again, there is an intuitive function that will do just that, in this case the arrange() function. Again, your first argument is the dataset followed by the variable that you want the data to be arranged by.

```{r}
arrange(starwars, mass)
```

# Changing a variable with mutate()

You'll notice that in the starwars dataset, the height variable is in centimeters. You may want to change that to meters by dividing each value by 100. Easy. The mutate() function follows a similar format to the functions above.

```{r}
mutate(starwars, height = height/100)
```

# Piping it all together 

In each of the examples above, we've applied one function to the data and produced an output. That output is a new data object with a new set of parameters and characteristics. What if we wanted to apply all of them? In other words, select, certain variables, filter the rows, arrange the data and mutate one of the variables, all at once.

One of the most exciting and powerful features of the tidyverse packages is the ability to take the output of any function and pass it on (or pipe it) to the next function. To do this we use what is called "pipe operators" that look funny but have a very simple meaning. The classic pipe opporator looks like this "%\>%" (so it looks a little like a pipe) and it simple means, "and then". Let's take a look:

```{r}
starwars %>% 
  select(name, height, mass) %>% 
  filter(height > 100) %>% 
  arrange(mass) %>% 
  mutate(height = height/100)
```

You'll notice that we didn't need to define the data object as the first argument for each function. By starting with a dataset and piping it into a function, that function assumes the piped in data object is the first argument. Its output become the data argument for the next function and so on.

# Add a few more functions to your tidyverse vocabulary 

### Rename and reorder variables 

Now that you can see how easy it is to send your dataset through a pipeline of functions, let's add some more very simple and intuitive, yet useful functions to your vocabulary.

We'll start with rename(). What does this function do? Well, you guessed it, you can use it to rename a variable. In the starwars dataset, you might want to select the variables, name, mass and height but rename "mass" and call it "weight". Here's how you do it:

```{r}
starwars %>% 
  select(name, mass, height) %>% 
  rename(weight = mass)
  
```

Notice that the new name of the variable comes before the equals sign in the rename() function. Also notice that when I selected the variables that I was going to work with, I didn't list them in the order that they existed in the original dataset. Instead, I listed them in the order that I wanted them and that is exactly what I go. So with this code, we've renamed and reordered the variables.

### Drop missing values 

Missing values are usually designated NA in your data (NA stands for Not Available). Well go into a lot of detail in a later chapter as to different strategies that you can adopt when dealing with missing values. For now however, its useful to know that you can drop missing values in the tidyverse with the function drop_na(). Let's take a quick look at the hair_color variable in the starwars data set.

```{r}
starwars %>% 
  select(name, hair_color)
```

Notice the NA values in the hair_color variable. We can remove them very easily with the drop_na() function.

```{r}
starwars %>% 
  select(name, hair_color) %>% 
  drop_na(hair_color)
```

Wha-la! Now more missing values in the hair_color variable. Note that when you remove missing values, you remove the entire row of data.
