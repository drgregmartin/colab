# Exploring data visually

There is no better way of letting your data tell its story than through data visualization. This is also an important step in understanding the relationships between variables and developing research questions.

## The grammar of graphics

The world of data visualization has been revolutionized with the introduction of ggplot2 - an R package that leans on a new of thinking about graphics. The starting point is to understand the "grammar of graphics" - these are the various parameters that need to be included in your code that will translate into meaningful visual characteristics in your plot.

The best way to learn and understand the grammar of graphics is to look at an example that we'll build up, layer upon layer.

We're going to take a look at the "mpg" dataset that contains information about fuel efficiency for a number cars. We'll start by visualizing the relationship between "hwy" (highway miles per gallon) and "displ" (engine displacement - or size of the engine). To plot this relationship we need to define a few things: 1) what data is being used, 2) how the two variables are mapped against the x and y axis' of our plot and 3) what kind of geometry should ggplot use to represent the data (a bar chart, scatter plot, line graph etc.). Let's create the plot and then take a closer look at the code:

```{r}
ggplot(data = mpg,
       mapping = aes(x = displ, y = hwy))+
  geom_point()
```

Let's take a closer look at the three principle components of grammar of graphics.

### **Data:** 

While ggplot has a "data" argument that allows you to define what data will be used to generate your plot, you can also feed the data directly into ggplot using pipe operators (but more about that later).

### Mapping aesthetics: 

To tell your data story, you need to specify how variables within the data are mapped to aesthetic features of your plot. The most obvious examples are the x and y axis. You can also map variables to colors, shapes and sizes and other aesthetic qualities as we'll demonstrate in examples below.

### Geometry

By defining the geometry you tell R what kind of plot to create (a boxplot, a histogram, a line graph etc.). The beauty of ggplot is that you can create layers of geometry, each with its own aesthetic mapping. Its this feature that sets ggplot apart.

Let's revisit our plot and distinguish between the different class of car. At the same time, I'm going to add a title and label the x and y axis' to make the plot look a little more professional.

```{r}
ggplot(data = mpg,
       mapping = aes(x = displ, 
                     y = hwy,
                     colour = class))+
  geom_point()+
  labs(title = "Highway efficency by engine size",
       x = "Engine size in litres", 
       y = "Mile per gallon on the highway")
```

Okay! This is starting to get interesting. Let's keep going. As mentioned earlier, the dataset being used can be piped into ggplot instead of being defined as an argument inside the function. This means that we can manipulate the data before we start plotting. This is best understood by looking at an example.

Let's imagine that we're only interested in SUVs and midsize cars. We could filter the dataset and then pipe it into ggplot. I'm also going to introduce you to the idea of "themes" in this chunk of code.

```{r}
mpg %>% 
  filter(class == "suv" |
         class == "midsize") %>% 
ggplot(mapping = aes(x = displ, 
                     y = hwy,
                     colour = class))+
  geom_point()+
  labs(title = "Highway efficency by engine size",
       x = "Engine size in litres", 
       y = "Mile per gallon on the highway")+
  theme_bw()
```

Our plot is beginning to look pretty good now, wouldn't you agree? We're not done. Let's overlay a smoothed linear model on top of our scatter plot to show the overall relationship between fuel efficiency and engine size in midsize and SUVs respectively. At the same time, I'm going to make the size of the dots a little bigger and a little more transparent but using the "size" and "alpha" arguments in the geom_point() function.

```{r}
mpg %>% 
  filter(class == "suv" |
         class == "midsize") %>% 
ggplot(mapping = aes(x = displ, 
                     y = hwy,
                     colour = class))+
  geom_point(size = 2,
             alpha = 0.2)+
  geom_smooth()+
  labs(title = "Highway efficency by engine size",
       x = "Engine size in litres", 
       y = "Mile per gallon on the highway")+
  theme_bw()
```

That's a lovely plot that includes two classes of car. If we wanted to include all of the classes, the plot would be extremely busy and impossible to interpret. An alternative would be to use the facet_wrap() function to separate out the classes of car into facets. In this example, let's include four classes of car.

You'll also notice that in this code I leave out the word "mapping". When we define the arguments of the aesthetic, ggplot knows that we're mapping and we don't need to state it explicitly. Similarly, the first two arguments are assumed to be the x and y axis' and so they can be listed without stating "x =" and "y =".

```{r}
mpg %>% 
  filter(class %in% c("suv", "subcompact", "compact", "pickup")) %>% 
ggplot(aes(displ, hwy))+
  geom_point(color = "orange",
             size = 1,
             alpha = 0.5)+
  geom_smooth()+
  facet_wrap(~class)+
  labs(title = "Highway efficency by engine size",
       x = "Engine size in litres", 
       y = "Mile per gallon on the highway")+
  theme_bw()
```
